# This job builds test images and uploads them to the `test-assets` dummy
# release as assets.
#
# It works by looking at the tests/IMAGES file in the repository and checks
# it against all the already-uploaded images.

name: Images

on:
  push:
    branches: [ "master" ]
    paths:
      - 'tests/IMAGES'

concurrency:
  # Ensure only a single instance of this job is run at any time
  group: ${{ github.ref }}

permissions:
  contents: write

jobs:
  build-upload:

    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v3

    - uses: cachix/install-nix-action@v21
      with:
        nix_path: nixpkgs=channel:nixos-unstable

    - name: Calculate needed images
      id: calculate
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        existing=$(gh release view test_assets --json assets --jq '.[][].name')

        # Begin multiline output parameter
        echo "NEEDED_IMAGES<<MULTILINE_EOF" >> "$GITHUB_OUTPUT"

        echo "$existing" | python3 -c '
        import sys

        # Calculate images that have already been uploaded
        existing = {line.strip() for line in sys.stdin}
        with open("./tests/IMAGES", "r") as f:
            lines = {line.strip() for line in f if line.strip()}

        # Print to stdout iamges we need to build and upload
        for line in lines:
            parts = line.split()
            name = f"image-{parts[0]}.{parts[1]}"
            if name not in existing:
                print(line)
        ' | tee -a "$GITHUB_OUTPUT"

        # End multiline output parameter
        echo "MULTILINE_EOF" >> "$GITHUB_OUTPUT"

    - name: Build needed images
      run: |
        while IFS= read -r args; do
            echo "Building: ${args}"
            # NB: we want to word split here
            ./scripts/build_image.sh $args
        done <<< "${{ steps.calculate.outputs.NEEDED_IMAGES }}"

    - name: Upload freshly built images
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        for image in image-*.*; do
          gh release upload test_assets "$image"
        done
